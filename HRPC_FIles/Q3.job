#BSUB -n 20 -R 'select[gpu] rusage[mem=2000] span[ptile=20]' -M 20000
#BSUB -J GPUStage15 -o output.%J -L /bin/bash -W 0:45
##
##NECESSARY JOB SPECIFICATIONS
##BSUB -J JobName             # Set the job name to "JobName"
##BSUB -L /bin/bash           # Uses the bash login shell to initialize the job's execution environment.
##BSUB -W hh:mm               # Sets job's runtime wall-clock limit in hours:minutes or just minutes (-mm)
##BSUB -n NNN                 # NNN: total number of cores/jobslots to allocate for the job
##BSUB -R "select[node-type]" # Select node-type: nxt, mem256gb, gpu, phi, mem1t, mem2t ...
##BSUB -R "span[ptile=XX]"    # XX:  number of cores/jobslots per node to use. Also, a node selection criterion.
##BSUB -R "rusage[mem=nnn]"   # Reserves nnn MBs per process/CPU for the job
##BSUB -M mm                  # Sets the per process enforceable memory limit to nnn MB
##BSUB -o OUTPUTFILE.%J       # Send stdout and stderr to "OUTPUTFILE.[jobID]"
#
# <--- at this point the current working directory is the one you submitted the job from.
#
module load intel/2017A  CUDA     # load Intel software stack 
#
#

nvidia-smi

echo "TEST 1 LUStage15.exe"
nvcc -arch=compute_35 -code=sm_35 -ccbin=icc -o LUStage15.exe LUStage15.cu
./LUStage15.exe

echo "TEST 2 LUStage16.exe"
nvcc -arch=compute_35 -code=sm_35 -ccbin=icc -o LUStage16.exe LUStage16.cu
./LUStage16.exe


echo "TEST 3 LUStage17.exe"
nvcc -arch=compute_35 -code=sm_35 -ccbin=icc -o LUStage17.exe LUStage17.cu
./LUStage17.exe